{"version":3,"sources":["redux/constCount.js","containers/Count/index.jsx","redux/actions/count.js","containers/Person/index.jsx","redux/actions/person.js","App.jsx","redux/reducers/person.js","redux/reducers/index.js","redux/reducers/count.js","redux/store.js","index.js"],"names":["INCREASE","DECREASE","ADDPERSON","Count","incerate","props","increase","decrease","incerateOdd","count","incerateAsync","increaseAsync","this","onClick","Component","mapDispatchToProps","data","type","dispatch","setTimeout","connect","state","Person","addP","nameInpt","ageInpt","id","nanoid","add","name","value","age","person","console","log","map","item","ref","c","App","initPersons","combineReducers","prestate","action","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","store","document","getElementById"],"mappings":"sKAAaA,EAAW,WACXC,EAAW,WACXC,EAAY,Y,OCGnBC,E,4MACJC,SAAW,WACT,EAAKC,MAAMC,SAAS,I,EAEtBC,SAAW,WACT,EAAKF,MAAME,SAAS,I,EAEtBC,YAAc,WACM,EAAKH,MAAfI,MACI,IAAM,GAClB,EAAKJ,MAAMC,SAAS,I,EAEtBI,cAAgB,WACd,EAAKL,MAAMM,cAAc,I,4CAE3B,WAAW,IACDP,EAAmDQ,KAAnDR,SAAUG,EAAyCK,KAAzCL,SAAUC,EAA+BI,KAA/BJ,YAAaE,EAAkBE,KAAlBF,cACjCD,EAAUG,KAAKP,MAAfI,MACR,OACE,gCACE,6BAAKA,IACL,wBAAQI,QAAST,EAAjB,gBACA,wBAAQS,QAASN,EAAjB,gBACA,wBAAQM,QAASL,EAAjB,2BACA,wBAAQK,QAASH,EAAjB,kC,GAxBYI,aA8BdC,EAAqB,CAIzBT,SCtCiC,SAAAU,GAAI,MAAK,CAAEC,KAAMjB,EAAUgB,SDuC5DT,SCtCiC,SAAAS,GAAI,MAAK,CAAEC,KAAMhB,EAAUe,SDuC5DL,cCtCwC,SAAAK,GACxC,OAAO,SAACE,GACNC,YAAW,WACTD,EAAS,CAAED,KAAMjB,EAAUgB,WAC1B,QDoCQI,eATS,SAAAC,GAAK,MAAK,CAAEZ,MAAOY,EAAMZ,SASTM,EAAzBK,CAA6CjB,G,eEtCtDmB,E,4MACJC,KAAO,WAAO,IAAD,iBACHC,EADG,EACHA,SAAUC,EADP,EACOA,QACZC,EAAKC,cACX,EAAKtB,MAAMuB,IAAI,CAAEF,KAAIG,KAAML,EAASM,MAAOC,IAAKN,EAAQK,S,4CAE1D,WAAW,IAAD,SACkBlB,KAAKP,MAAvB2B,EADA,EACAA,OAAQvB,EADR,EACQA,MAEhB,OADAwB,QAAQC,IAAIF,GAEV,gCAEIA,EAAOG,KAAI,SAAAC,GACT,OACE,gCACE,6BAAKA,EAAKP,OACV,6BAAKO,EAAKL,MACV,uBAAOd,KAAK,OAAOoB,IAAK,SAAAC,GAAC,OAAI,EAAKd,SAAWc,KAC7C,uBAAOrB,KAAK,OAAOoB,IAAK,SAAAC,GAAC,OAAI,EAAKb,QAAUa,KAC5C,wBAAQzB,QAAS,EAAKU,KAAtB,4BALQa,EAAKV,OAWrB,yCAAYjB,Y,GAzBCK,aAgCfC,EAAqB,CACzBa,ICrCuB,SAAAZ,GAAI,MAAK,CAAEC,KAAMf,EAAWc,UDuCtCI,eAJS,SAAAC,GAAK,MAAK,CAAEW,OAAQX,EAAMW,OAAQvB,MAAOY,EAAMZ,SAI/BM,EAAzBK,CAA6CE,GEpCvCiB,E,4JACnB,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,W,GALyBzB,a,2BCF3B0B,EAAc,CAAC,CAAEd,GAAI,MAAOG,KAAM,WAAYE,IAAK,KCI1CU,gCAAgB,CAC7BhC,MCLa,WAA+C,IAA/BiC,EAA8B,uDAD3C,EACmCC,EAAQ,uCACnD1B,EAAe0B,EAAf1B,KAAMD,EAAS2B,EAAT3B,KACd,OAAQC,GACN,KAAKjB,EAAU,OAAO0C,EAAW1B,EACjC,KAAKf,EAAU,OAAOyC,EAAW1B,EACjC,QAAS,OAAO0B,IDClBV,ODLa,WAAkD,IAAjCU,EAAgC,uDAArBF,EAAaG,EAAQ,uCACtD1B,EAAe0B,EAAf1B,KAAMD,EAAS2B,EAAT3B,KACd,OAAQC,GACN,KAAKf,EAAW,MAAM,CAAEc,GAAR,mBAAiB0B,IACjC,QAAS,OAAOA,M,QGGLE,wBAAYC,EAASC,8BAAoBC,0BAAgBC,OCHxEC,IAASC,OAEP,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2bca74c6.chunk.js","sourcesContent":["export const INCREASE = 'increase'\r\nexport const DECREASE = 'decrease'\r\nexport const ADDPERSON = 'addperson'","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { creatIncreaseAction, creatDecreaseAction, createIncrementAsyncAction } from '../../redux/actions/count'\r\n\r\n// 将ui组件和容器写在一个组件中, 容器放下面, 不用再引入ui组件, 直接就能拿着用\r\nclass Count extends Component {\r\n  incerate = () => {\r\n    this.props.increase(1)\r\n  }\r\n  decrease = () => {\r\n    this.props.decrease(1)\r\n  }\r\n  incerateOdd = () => {\r\n    const { count } = this.props\r\n    if (count % 2 === 0) return\r\n    this.props.increase(1)\r\n  }\r\n  incerateAsync = () => {\r\n    this.props.increaseAsync(1)\r\n  }\r\n  render () {\r\n    const { incerate, decrease, incerateOdd, incerateAsync } = this\r\n    const { count } = this.props\r\n    return (\r\n      <div>\r\n        <h1>{count}</h1>\r\n        <button onClick={incerate}>+1</button>\r\n        <button onClick={decrease}>-1</button>\r\n        <button onClick={incerateOdd}>奇数+</button>\r\n        <button onClick={incerateAsync}>异步+</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = state => ({ count: state.count })\r\nconst mapDispatchToProps = {\r\n  // 这里也可以返回一个对象, 就是一个映射关系, key的值是一个函数, 这里不进行调用\r\n  // 因为在action中可以调用, 这里只是将那里定义的函数传递出去\r\n  // 原来返回函数的形式, 是在回调函数中调用action中的函数, 这里只是传递了函数\r\n  increase: creatIncreaseAction,\r\n  decrease: creatDecreaseAction,\r\n  increaseAsync: createIncrementAsyncAction\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Count)","import { INCREASE, DECREASE } from '../constCount'\r\nexport const creatIncreaseAction = data => ({ type: INCREASE, data })\r\nexport const creatDecreaseAction = data => ({ type: DECREASE, data })\r\nexport const createIncrementAsyncAction = data => {\r\n  return (dispatch) => {\r\n    setTimeout(() => {\r\n      dispatch({ type: INCREASE, data })\r\n    }, 500)\r\n  }\r\n}","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { addPerson } from '../../redux/actions/person'\r\nimport { nanoid } from 'nanoid'\r\n\r\nclass Person extends Component {\r\n  addP = () => {\r\n    const { nameInpt, ageInpt } = this\r\n    const id = nanoid()\r\n    this.props.add({ id, name: nameInpt.value, age: ageInpt.value })\r\n  }\r\n  render () {\r\n    const { person, count } = this.props\r\n    console.log(person)\r\n    return (\r\n      <div>\r\n        {\r\n          person.map(item => {\r\n            return (\r\n              <div key={item.id}>\r\n                <h3>{item.name}</h3>\r\n                <h3>{item.age}</h3>\r\n                <input type=\"text\" ref={c => this.nameInpt = c} />\r\n                <input type=\"text\" ref={c => this.ageInpt = c} />\r\n                <button onClick={this.addP}>添加</button>\r\n              </div>\r\n            )\r\n          })\r\n        }\r\n\r\n        <h2>COUNT: {count}</h2>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n// 多个reducer通过combine连接成的对象, 都在state中存着, 连接时的key就是这里取值是state的key\r\nconst mapStateToProps = state => ({ person: state.person, count: state.count })\r\nconst mapDispatchToProps = {\r\n  add: addPerson\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Person)","import { ADDPERSON } from '../constCount'\r\nexport const addPerson = data => ({ type: ADDPERSON, data })","import React, { Component } from 'react'\r\nimport Count from './containers/Count'\r\nimport Person from './containers/Person'\r\n\r\nexport default class App extends Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        <Count />\r\n        <Person />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import { ADDPERSON } from '../constCount'\r\n\r\nconst initPersons = [{ id: '001', name: 'tongtong', age: 18 }]\r\nexport default function person (prestate = initPersons, action) {\r\n  const { type, data } = action\r\n  switch (type) {\r\n    case ADDPERSON: return [data, ...prestate]\r\n    default: return prestate\r\n  }\r\n}","import { combineReducers } from 'redux'\r\n\r\n// 引入reducer\r\nimport count from './count'\r\nimport person from './person'\r\n\r\nexport default combineReducers({\r\n  count,\r\n  person\r\n})","import { INCREASE, DECREASE } from '../constCount'\r\nconst initCount = 0\r\nexport default function count (prestate = initCount, action) {\r\n  const { type, data } = action\r\n  switch (type) {\r\n    case INCREASE: return prestate + data\r\n    case DECREASE: return prestate - data\r\n    default: return prestate\r\n  }\r\n}","// 需要引入combineReducers, 每一个reducer初始化一个状态\r\n// 当有多个状态时, 需要多个reducer, 这时候就需要使用combine进行连接成为一个对象\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n// 引入reducer\r\nimport reducer from './reducers'\r\n// 引入用于解析异步创建action的函数的中间件\r\nimport thunk from 'redux-thunk'\r\n// 创建store时传递的是最终连接后的reducer\r\n// 使用开发者工具composeWithDevTools时, 作为第二个参数调用, 如果第二个参数本身存在, 那原有的作为composeWithDevTools的参数\r\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport store from './redux/store'\r\n// 引入Provider, 用于给所有容器传递store, 组件里就可以使用了, 不要每次都在组件中传\r\nimport { Provider } from 'react-redux'\r\n// 正常渲染, 注意这里是两次, 一次正常, 一次是放在回调里的\r\nReactDOM.render(\r\n  // 在Provider中传递store, 就会给所有容器传递\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n// 使用react-redux后就不需要监听变化重新渲染了\r\n\r\n// store.subscribe(() => {\r\n//   ReactDOM.render(<App />, document.getElementById('root'))\r\n// })"],"sourceRoot":""}