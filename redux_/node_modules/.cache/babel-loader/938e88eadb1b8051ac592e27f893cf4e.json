{"ast":null,"code":"var _jsxFileName = \"D:\\\\my\\\\my_web_pro\\\\my_react\\\\redux_\\\\src\\\\components\\\\pureComponent\\\\index.js\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class index extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      num: '111'\n    };\n\n    this.change = () => {\n      this.setState({});\n    };\n  }\n\n  // 按照常理来说, state状态如果未发生改变, 不应该执行render函数\n  // 同样, 如果传给子组件的props没有更新, 也不应该仔细子组件的render\n  // 可以借助生命周期的shouldComponentUpdate控制阀门, 接收两个参数, 分别是即将变化的state和props\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log(nextState, nextProps);\n    return true;\n  }\n\n  render() {\n    console.log(\"父组件render\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: this.state.car\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.change,\n        children: \"\\u6539\\u53D8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(C, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass C extends Component {\n  render() {\n    console.log('子组件render');\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u6211\\u662F\\u5B50\\u7EC4\\u4EF6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/my/my_web_pro/my_react/redux_/src/components/pureComponent/index.js"],"names":["React","Component","index","state","num","change","setState","shouldComponentUpdate","nextProps","nextState","console","log","render","car","C"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,eAAe,MAAMC,KAAN,SAAoBD,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC3CE,KAD2C,GACnC;AACNC,MAAAA,GAAG,EAAE;AADC,KADmC;;AAAA,SAM3CC,MAN2C,GAMlC,MAAM;AACb,WAAKC,QAAL,CAAc,EAAd;AACD,KAR0C;AAAA;;AAS3C;AACA;AACA;AACAC,EAAAA,qBAAqB,CAAEC,SAAF,EAAaC,SAAb,EAAwB;AAC3CC,IAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ,EAAuBD,SAAvB;AACA,WAAO,IAAP;AACD;;AACDI,EAAAA,MAAM,GAAI;AACRF,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,wBACE;AAAA,8BACE;AAAA,kBAAK,KAAKR,KAAL,CAAWU;AAAhB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,KAAKR,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,CAAD;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAzB0C;;AA2B7C,MAAMS,CAAN,SAAgBb,SAAhB,CAA0B;AACxBW,EAAAA,MAAM,GAAI;AACRF,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;;AANuB","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class index extends Component {\r\n  state = {\r\n    num: '111'\r\n  }\r\n  // 只要setState执行, 不管state状态是否发生改变, 都会引起组件执行render\r\n  // 同时, 其相应的子组件也会执行render\r\n  change = () => {\r\n    this.setState({})\r\n  }\r\n  // 按照常理来说, state状态如果未发生改变, 不应该执行render函数\r\n  // 同样, 如果传给子组件的props没有更新, 也不应该仔细子组件的render\r\n  // 可以借助生命周期的shouldComponentUpdate控制阀门, 接收两个参数, 分别是即将变化的state和props\r\n  shouldComponentUpdate (nextProps, nextState) {\r\n    console.log(nextState, nextProps)\r\n    return true\r\n  }\r\n  render () {\r\n    console.log(\"父组件render\")\r\n    return (\r\n      <div>\r\n        <h3>{this.state.car}</h3>\r\n        <button onClick={this.change}>改变</button>\r\n        <C />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nclass C extends Component {\r\n  render () {\r\n    console.log('子组件render')\r\n    return (\r\n      <h2>我是子组件</h2>\r\n    )\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}