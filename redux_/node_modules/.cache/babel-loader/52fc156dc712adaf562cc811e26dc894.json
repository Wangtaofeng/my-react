{"ast":null,"code":"var _jsxFileName = \"D:\\\\my\\\\my_web_pro\\\\my_react\\\\redux_\\\\src\\\\components\\\\myHook\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Deom() {\n  _s();\n\n  console.log('--------------'); // 注意这里是数组里按照下标取值, 前两个索引的值对应的一个是state, 一个setState, 这里的state是可以改变的名称\n  // useState(init), 里面的init里面传递是初始状态, 如果有多个, 可以设置为一个对象\n\n  const [state, setState] = React.useState({\n    count: 0\n  }); // 使用useEffect可以是函数式组件也可以使用生命周期函数\n  // useEffect其实是componentDidMount, componentDidUpdate, componentWillUmount三个钩子的集成,\n  // 第一个参数是一个函数, 该函数就是生命周期函数内需要写的,return一个函数时, 这个函数就是componentWillUmount\n  // 在return函数之前的函数体具体是前两个钩子的哪一个, 还是要看第二个参数, 第二个参数是一个数组\n  // 里面存放的是监视的state, 不传值就不会监视, 就不会引起页面更新, 就只会像componentDidMount一样只执行一次\n  // 如果直接不传第二个参数, 就全部监视, 就是update钩子, 任意一个state改变都会引起页面更新, 也会执行函数体\n  // 或者传递某个状态值, 也是起到了update钩子的作用, 但是只是监视的state变化才会执行函数体\n\n  React.useEffect(() => {}, []);\n\n  function add() {\n    setState({\n      count: state.count + 1\n    });\n  }\n\n  function unmount() {\n    // 卸载组件, 可以直接调用ReactDOM的方法\n    ReactDOM.unmountComponentAtNode(document.getElementById('root'));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\u5F53\\u524D\\u6C42\\u548C\\u4E3A\\uFF1A\", state.count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: add,\n      children: \"\\u70B9\\u6211+1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: unmount,\n      children: \"\\u5378\\u8F7D\\u7EC4\\u4EF6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Deom, \"kcd+c1a7RyKAa2KvtJN963wq2Sk=\");\n\n_c = Deom;\nexport default Deom;\n\nvar _c;\n\n$RefreshReg$(_c, \"Deom\");","map":{"version":3,"sources":["D:/my/my_web_pro/my_react/redux_/src/components/myHook/index.jsx"],"names":["React","ReactDOM","Deom","console","log","state","setState","useState","count","useEffect","add","unmount","unmountComponentAtNode","document","getElementById"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;;;AAEA,SAASC,IAAT,GAAiB;AAAA;;AACfC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EADe,CAEf;AACA;;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,KAAK,CAACO,QAAN,CAAe;AAAEC,IAAAA,KAAK,EAAE;AAAT,GAAf,CAA1B,CAJe,CAKf;AACA;AACA;AACA;AACA;AACA;AACA;;AACAR,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM,CAErB,CAFD,EAEE,EAFF;;AAGA,WAASC,GAAT,GAAgB;AACdJ,IAAAA,QAAQ,CAAC;AAAEE,MAAAA,KAAK,EAAEH,KAAK,CAACG,KAAN,GAAc;AAAvB,KAAD,CAAR;AACD;;AACD,WAASG,OAAT,GAAoB;AAClB;AACAV,IAAAA,QAAQ,CAACW,sBAAT,CAAgCC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAhC;AACD;;AACD,sBACE;AAAA,4BAEE;AAAA,yDAAWT,KAAK,CAACG,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAQ,MAAA,OAAO,EAAEE,GAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAQ,MAAA,OAAO,EAAEC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA/BQT,I;;KAAAA,I;AAgCT,eAAeA,IAAf","sourcesContent":["import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nfunction Deom () {\r\n  console.log('--------------')\r\n  // 注意这里是数组里按照下标取值, 前两个索引的值对应的一个是state, 一个setState, 这里的state是可以改变的名称\r\n  // useState(init), 里面的init里面传递是初始状态, 如果有多个, 可以设置为一个对象\r\n  const [state, setState] = React.useState({ count: 0 })\r\n  // 使用useEffect可以是函数式组件也可以使用生命周期函数\r\n  // useEffect其实是componentDidMount, componentDidUpdate, componentWillUmount三个钩子的集成,\r\n  // 第一个参数是一个函数, 该函数就是生命周期函数内需要写的,return一个函数时, 这个函数就是componentWillUmount\r\n  // 在return函数之前的函数体具体是前两个钩子的哪一个, 还是要看第二个参数, 第二个参数是一个数组\r\n  // 里面存放的是监视的state, 不传值就不会监视, 就不会引起页面更新, 就只会像componentDidMount一样只执行一次\r\n  // 如果直接不传第二个参数, 就全部监视, 就是update钩子, 任意一个state改变都会引起页面更新, 也会执行函数体\r\n  // 或者传递某个状态值, 也是起到了update钩子的作用, 但是只是监视的state变化才会执行函数体\r\n  React.useEffect(() => {\r\n\r\n  },[])\r\n  function add () {\r\n    setState({ count: state.count + 1 })\r\n  }\r\n  function unmount () {\r\n    // 卸载组件, 可以直接调用ReactDOM的方法\r\n    ReactDOM.unmountComponentAtNode(document.getElementById('root'))\r\n  }\r\n  return (\r\n    <div>\r\n      {/* <input type=\"text\" ref={myRef} /> */}\r\n      <h2>当前求和为：{state.count}</h2>\r\n      <button onClick={add}>点我+1</button>\r\n      <button onClick={unmount}>卸载组件</button>\r\n      {/* <button onClick={show}>点我提示数据</button> */}\r\n    </div>\r\n  )\r\n}\r\nexport default Deom\r\n"]},"metadata":{},"sourceType":"module"}