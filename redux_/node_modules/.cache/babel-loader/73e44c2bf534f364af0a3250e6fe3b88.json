{"ast":null,"code":"// 该文件是count的容器, react-redux规定, 组件不能直接操作redux\n// 这里通过props与组件连接, 并与store连接\n// 在这里不引入store, 下面的state和dispatch也不是本来就有的, 需要在组件挂载时, 在那里将store传递,而且也不用接收\n// 这个组件会在根组件挂载, 在那里传递就行, 具体可以去App.js查看\n// 引入组件\nimport Count from '../../components/Count'; // 引入用于连接组件和store的connect\n\nimport { connect } from 'react-redux'; // 引入创建action对象的方法, 用于下方操作state\n\nimport { creatIncreaseAction, creatDecreaseAction, createIncrementAsyncAction } from '../../redux/countAction'; // connect方法需要传递两个参数, 均为函数, 一个返回状态, 一个返回操作状态的方法\n// 第一个参数, 返回store中的状态, 参数为store中的state,该返回值在组件中的props中\n\nfunction mapStateToProps(state) {\n  // 需要返回一个对象\n  return {\n    count: state\n  };\n} // 第二个参数, 返回操作store状态的方法, 参数为dispatch, 可以用来通知store去操作状态\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    increase(data) {\n      dispatch(creatIncreaseAction(data));\n    },\n\n    decrease(data) {\n      dispatch(creatDecreaseAction(data));\n    },\n\n    increaseAsync(data) {\n      dispatch(createIncrementAsyncAction(data));\n    }\n\n  };\n} // 暴露一个连接组件和store后的容器\n// connect是一个高阶函数, 第一个函数的参数是两个参数, 一个用于将state传给组件, 一个用于将操作传给组件\n// 第二个函数参数是组件\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Count);","map":{"version":3,"sources":["D:/my/my_web_pro/my_react/redux_/src/containers/countContainer/index.jsx"],"names":["Count","connect","creatIncreaseAction","creatDecreaseAction","createIncrementAsyncAction","mapStateToProps","state","count","mapDispatchToProps","dispatch","increase","data","decrease","increaseAsync"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,wBAAlB,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,0BAAnD,QAAqF,yBAArF,C,CACA;AAEA;;AACA,SAASC,eAAT,CAA0BC,KAA1B,EAAiC;AAC/B;AACA,SAAO;AAAEC,IAAAA,KAAK,EAAED;AAAT,GAAP;AACD,C,CACD;;;AACA,SAASE,kBAAT,CAA6BC,QAA7B,EAAuC;AACrC,SAAO;AACLC,IAAAA,QAAQ,CAAEC,IAAF,EAAQ;AACdF,MAAAA,QAAQ,CAACP,mBAAmB,CAACS,IAAD,CAApB,CAAR;AACD,KAHI;;AAILC,IAAAA,QAAQ,CAAED,IAAF,EAAQ;AACdF,MAAAA,QAAQ,CAACN,mBAAmB,CAACQ,IAAD,CAApB,CAAR;AACD,KANI;;AAOLE,IAAAA,aAAa,CAAEF,IAAF,EAAQ;AACnBF,MAAAA,QAAQ,CAACL,0BAA0B,CAACO,IAAD,CAA3B,CAAR;AACD;;AATI,GAAP;AAWD,C,CACD;AACA;AACA;;;AACA,eAAeV,OAAO,CAACI,eAAD,EAAkBG,kBAAlB,CAAP,CAA6CR,KAA7C,CAAf","sourcesContent":["// 该文件是count的容器, react-redux规定, 组件不能直接操作redux\r\n// 这里通过props与组件连接, 并与store连接\r\n// 在这里不引入store, 下面的state和dispatch也不是本来就有的, 需要在组件挂载时, 在那里将store传递,而且也不用接收\r\n// 这个组件会在根组件挂载, 在那里传递就行, 具体可以去App.js查看\r\n\r\n// 引入组件\r\nimport Count from '../../components/Count'\r\n// 引入用于连接组件和store的connect\r\nimport { connect } from 'react-redux'\r\n// 引入创建action对象的方法, 用于下方操作state\r\nimport { creatIncreaseAction, creatDecreaseAction, createIncrementAsyncAction } from '../../redux/countAction'\r\n// connect方法需要传递两个参数, 均为函数, 一个返回状态, 一个返回操作状态的方法\r\n\r\n// 第一个参数, 返回store中的状态, 参数为store中的state,该返回值在组件中的props中\r\nfunction mapStateToProps (state) {\r\n  // 需要返回一个对象\r\n  return { count: state }\r\n}\r\n// 第二个参数, 返回操作store状态的方法, 参数为dispatch, 可以用来通知store去操作状态\r\nfunction mapDispatchToProps (dispatch) {\r\n  return {\r\n    increase (data) {\r\n      dispatch(creatIncreaseAction(data))\r\n    },\r\n    decrease (data) {\r\n      dispatch(creatDecreaseAction(data))\r\n    },\r\n    increaseAsync (data) {\r\n      dispatch(createIncrementAsyncAction(data))\r\n    }\r\n  }\r\n}\r\n// 暴露一个连接组件和store后的容器\r\n// connect是一个高阶函数, 第一个函数的参数是两个参数, 一个用于将state传给组件, 一个用于将操作传给组件\r\n// 第二个函数参数是组件\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Count)"]},"metadata":{},"sourceType":"module"}