{"ast":null,"code":"var _jsxFileName = \"D:\\\\my\\\\my_web_pro\\\\my_react\\\\redux_\\\\src\\\\components\\\\pureComponent\\\\index.js\";\nimport React, { PureComponent } from 'react'; // 使用纯组件PureComponent, 会自动帮我们判断上述的变化是否需要执行render\n// 注意这里之所以叫做纯组件, 和纯函数类似, 不得修改原参数(原状态), 否则监听不到修改\n// 如果是一个数组, 直接修改数组里面的值, 或者修改对象的某个属性, 是不会被监听到的\n// 可参照下面采用重新赋值的方法\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class index extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      num: '111',\n      age: 18,\n      arr: [1, 2, 3],\n      obj: {\n        num: '23',\n        age: 18\n      }\n    };\n\n    this.change = () => {\n      // --错误写法, 得到arr的引用值, 实际操作的还是arr, setState时, 还是那个地址并未变化\n      // let arr = this.state.arr\n      // arr.push(4)\n      // this.setState({ arr: arr })\n      // 正确写法是设置一个新的数组或者对象\n      // let arr = this.state.arr\n      // this.setState({ arr: [...arr, 4] })\n      let obj = this.state.obj;\n      obj.name = '11';\n    };\n  }\n\n  render() {\n    console.log(\"父组件render\");\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: this.state.car\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.change,\n        children: \"\\u6539\\u53D8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(C, {\n        age: this.state.age\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass C extends PureComponent {\n  render() {\n    console.log('子组件render');\n    return /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u6211\\u662F\\u5B50\\u7EC4\\u4EF6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/my/my_web_pro/my_react/redux_/src/components/pureComponent/index.js"],"names":["React","PureComponent","index","state","num","age","arr","obj","change","name","render","console","log","car","C"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC,C,CAEA;AACA;AACA;AACA;;;AACA,eAAe,MAAMC,KAAN,SAAoBD,aAApB,CAAkC;AAAA;AAAA;AAAA,SAC/CE,KAD+C,GACvC;AACNC,MAAAA,GAAG,EAAE,KADC;AAENC,MAAAA,GAAG,EAAE,EAFC;AAGNC,MAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHC;AAINC,MAAAA,GAAG,EAAE;AACHH,QAAAA,GAAG,EAAE,IADF;AAEHC,QAAAA,GAAG,EAAE;AAFF;AAJC,KADuC;;AAAA,SAU/CG,MAV+C,GAUtC,MAAM;AACb;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,UAAID,GAAG,GAAG,KAAKJ,KAAL,CAAWI,GAArB;AACAA,MAAAA,GAAG,CAACE,IAAJ,GAAW,IAAX;AAED,KAtB8C;AAAA;;AAuB/CC,EAAAA,MAAM,GAAI;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,wBACE;AAAA,8BACE;AAAA,kBAAK,KAAKT,KAAL,CAAWU;AAAhB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,KAAKL,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,CAAD;AAAG,QAAA,GAAG,EAAE,KAAKL,KAAL,CAAWE;AAAnB;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAhC8C;;AAkCjD,MAAMS,CAAN,SAAgBb,aAAhB,CAA8B;AAC5BS,EAAAA,MAAM,GAAI;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;;AAN2B","sourcesContent":["import React, { PureComponent } from 'react'\r\n\r\n// 使用纯组件PureComponent, 会自动帮我们判断上述的变化是否需要执行render\r\n// 注意这里之所以叫做纯组件, 和纯函数类似, 不得修改原参数(原状态), 否则监听不到修改\r\n// 如果是一个数组, 直接修改数组里面的值, 或者修改对象的某个属性, 是不会被监听到的\r\n// 可参照下面采用重新赋值的方法\r\nexport default class index extends PureComponent {\r\n  state = {\r\n    num: '111',\r\n    age: 18,\r\n    arr: [1, 2, 3],\r\n    obj: {\r\n      num: '23',\r\n      age: 18\r\n    }\r\n  }\r\n  change = () => {\r\n    // --错误写法, 得到arr的引用值, 实际操作的还是arr, setState时, 还是那个地址并未变化\r\n    // let arr = this.state.arr\r\n    // arr.push(4)\r\n    // this.setState({ arr: arr })\r\n\r\n    // 正确写法是设置一个新的数组或者对象\r\n    // let arr = this.state.arr\r\n    // this.setState({ arr: [...arr, 4] })\r\n    let obj = this.state.obj\r\n    obj.name = '11'\r\n    \r\n  }\r\n  render () {\r\n    console.log(\"父组件render\")\r\n    return (\r\n      <div>\r\n        <h3>{this.state.car}</h3>\r\n        <button onClick={this.change}>改变</button>\r\n        <C age={this.state.age} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nclass C extends PureComponent {\r\n  render () {\r\n    console.log('子组件render')\r\n    return (\r\n      <h2>我是子组件</h2>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}