{"ast":null,"code":"var _jsxFileName = \"D:\\\\my\\\\my_web_pro\\\\my_react\\\\redux_\\\\src\\\\components\\\\ErrorBoundary\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class index extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      Error: ''\n    };\n  }\n\n  // 注意需要static, 而且参数error是子组件错误时传递的错误信息\n  static getDeriveStateFromError(Error) {\n    // 当子组件出错时, 会执行该函数, 不能捕获自己的\n    // 一般是在子组件加载时的生命周期函数调用出错会执行该函数\n    // 需要return一个状态对象, 该对象会成为state的值, 同时在state需要声明\n    return {\n      Error\n    };\n  } // 还有一个不常用的生命周期componentDidCatch(), 每次出错时也会调用, 一般用于统计错误次数\n\n\n  componentDidCatch() {\n    console.log('出错了');\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u6211\\u662F\\u7236\\u7EC4\\u4EF6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), this.state.Error ? /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u51FA\\u9519\\u4E86\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(A, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 44\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nclass A extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u6211\\u662FA\\u7EC4\\u4EF6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/my/my_web_pro/my_react/redux_/src/components/ErrorBoundary/index.jsx"],"names":["React","Component","index","state","Error","getDeriveStateFromError","componentDidCatch","console","log","render","A"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,eAAe,MAAMC,KAAN,SAAoBD,SAApB,CAA8B;AAAA;AAAA;AAAA,SAC3CE,KAD2C,GACnC;AACNC,MAAAA,KAAK,EAAE;AADD,KADmC;AAAA;;AAI3C;AAC8B,SAAvBC,uBAAuB,CAAED,KAAF,EAAS;AACrC;AACA;AACA;AACA,WAAO;AAAEA,MAAAA;AAAF,KAAP;AACD,GAV0C,CAW3C;;;AACAE,EAAAA,iBAAiB,GAAI;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACD;;AACDC,EAAAA,MAAM,GAAI;AACR,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAGG,KAAKN,KAAL,CAAWC,KAAX,gBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAnB,gBAAkC,QAAC,CAAD;AAAA;AAAA;AAAA;AAAA,cAHrC;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAvB0C;;AAyB7C,MAAMM,CAAN,SAAgBT,SAAhB,CAA0B;AACxBQ,EAAAA,MAAM,GAAI;AACR,wBACE;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAPuB","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class index extends Component {\r\n  state = {\r\n    Error: ''\r\n  }\r\n  // 注意需要static, 而且参数error是子组件错误时传递的错误信息\r\n  static getDeriveStateFromError (Error) {\r\n    // 当子组件出错时, 会执行该函数, 不能捕获自己的\r\n    // 一般是在子组件加载时的生命周期函数调用出错会执行该函数\r\n    // 需要return一个状态对象, 该对象会成为state的值, 同时在state需要声明\r\n    return { Error }\r\n  }\r\n  // 还有一个不常用的生命周期componentDidCatch(), 每次出错时也会调用, 一般用于统计错误次数\r\n  componentDidCatch () {\r\n    console.log('出错了')\r\n  }\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h3>我是父组件</h3>\r\n        {/* 那么这里就可以根据错误状态来判断子组件出错时需要展示什么 */}\r\n        {this.state.Error ? <h1>出错了</h1> : <A />}\r\n      </div>\r\n    )\r\n  }\r\n}\r\nclass A extends Component {\r\n  render () {\r\n    return (\r\n      <div>\r\n        <h1>我是A组件</h1>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}