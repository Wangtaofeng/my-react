{"ast":null,"code":"// 需要引入combineReducers, 每一个reducer初始化一个状态\n// 当有多个状态时, 需要多个reducer, 这时候就需要使用combine进行连接成为一个对象\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension'; // 引入reducer\n\nimport reducer from './reducers'; // 引入用于解析异步创建action的函数的中间件\n\nimport thunk from 'redux-thunk'; // 创建store时传递的是最终连接后的reducer\n// 使用开发者工具composeWithDevTools时, 作为第二个参数调用, 如果第二个参数本身存在, 那原有的作为composeWithDevTools的参数\n\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(thunk)));","map":{"version":3,"sources":["D:/my/my_web_pro/my_react/redux_/src/redux/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","reducer","thunk"],"mappings":"AAAA;AACA;AACA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC,C,CACA;;AACA,OAAOC,OAAP,MAAoB,YAApB,C,CACA;;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CACA;AACA;;AACA,eAAeJ,WAAW,CAACG,OAAD,EAAUD,mBAAmB,CAACD,eAAe,CAACG,KAAD,CAAhB,CAA7B,CAA1B","sourcesContent":["// 需要引入combineReducers, 每一个reducer初始化一个状态\r\n// 当有多个状态时, 需要多个reducer, 这时候就需要使用combine进行连接成为一个对象\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n// 引入reducer\r\nimport reducer from './reducers'\r\n// 引入用于解析异步创建action的函数的中间件\r\nimport thunk from 'redux-thunk'\r\n// 创建store时传递的是最终连接后的reducer\r\n// 使用开发者工具composeWithDevTools时, 作为第二个参数调用, 如果第二个参数本身存在, 那原有的作为composeWithDevTools的参数\r\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))"]},"metadata":{},"sourceType":"module"}