{"ast":null,"code":"var _jsxFileName = \"D:\\\\my\\\\my_web_pro\\\\my_react\\\\redux_\\\\src\\\\components\\\\Count\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport store from '../../redux/store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Count extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.incerate = () => {\n      // 像store传递action对象, store再将preState和action对象传给reducer\n      store.dispatch({\n        type: 'increase',\n        data: 1\n      });\n    };\n\n    this.decrease = () => {\n      store.dispatch({\n        type: 'decrease',\n        data: 1\n      });\n    };\n\n    this.incerateOdd = () => {\n      const count = store.getState();\n      if (count % 2 === 0) return;\n      store.dispatch({\n        type: 'increase',\n        data: 1\n      });\n    };\n\n    this.incerateAsync = () => {\n      setTimeout(() => {\n        store.dispatch({\n          type: 'increase',\n          data: 1\n        });\n      }, 500);\n    };\n  }\n\n  // 虽然更改了Redux的state, 但是不会引起组件的重新执行render\n  // 每次redux一旦改变, 就会执行store.subscribe方法,可以在这个方法里更细一个空state\n  // 只要state改变就会重新执行render\n  // 也可以在index.js中执行这个, 具体可以去那里看\n  // 因此可以在生命周期开始利用store.subscribe进行监视,\n  componentDidMount() {}\n\n  render() {\n    const {\n      incerate,\n      decrease,\n      incerateOdd,\n      incerateAsync\n    } = this;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: store.getState()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incerate,\n        children: \"+1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decrease,\n        children: \"-1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incerateOdd,\n        children: \"\\u5947\\u6570+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: incerateAsync,\n        children: \"\\u5F02\\u6B65+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/my/my_web_pro/my_react/redux_/src/components/Count/index.jsx"],"names":["React","Component","store","Count","incerate","dispatch","type","data","decrease","incerateOdd","count","getState","incerateAsync","setTimeout","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,mBAAlB;;AAEA,eAAe,MAAMC,KAAN,SAAoBF,SAApB,CAA8B;AAAA;AAAA;;AAAA,SAU3CG,QAV2C,GAUhC,MAAM;AACf;AACAF,MAAAA,KAAK,CAACG,QAAN,CAAe;AAAEC,QAAAA,IAAI,EAAE,UAAR;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAAf;AACD,KAb0C;;AAAA,SAc3CC,QAd2C,GAchC,MAAM;AACfN,MAAAA,KAAK,CAACG,QAAN,CAAe;AAAEC,QAAAA,IAAI,EAAE,UAAR;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAAf;AACD,KAhB0C;;AAAA,SAiB3CE,WAjB2C,GAiB7B,MAAM;AAClB,YAAMC,KAAK,GAAGR,KAAK,CAACS,QAAN,EAAd;AACA,UAAID,KAAK,GAAG,CAAR,KAAc,CAAlB,EAAqB;AACrBR,MAAAA,KAAK,CAACG,QAAN,CAAe;AAAEC,QAAAA,IAAI,EAAE,UAAR;AAAoBC,QAAAA,IAAI,EAAE;AAA1B,OAAf;AACD,KArB0C;;AAAA,SAsB3CK,aAtB2C,GAsB3B,MAAM;AACpBC,MAAAA,UAAU,CAAC,MAAM;AACfX,QAAAA,KAAK,CAACG,QAAN,CAAe;AAAEC,UAAAA,IAAI,EAAE,UAAR;AAAoBC,UAAAA,IAAI,EAAE;AAA1B,SAAf;AACD,OAFS,EAEP,GAFO,CAAV;AAGD,KA1B0C;AAAA;;AAC3C;AACA;AACA;AACA;AACA;AACAO,EAAAA,iBAAiB,GAAI,CAEpB;;AAmBDC,EAAAA,MAAM,GAAI;AACR,UAAM;AAAEX,MAAAA,QAAF;AAAYI,MAAAA,QAAZ;AAAsBC,MAAAA,WAAtB;AAAmCG,MAAAA;AAAnC,QAAqD,IAA3D;AACA,wBACE;AAAA,8BACE;AAAA,kBAAKV,KAAK,CAACS,QAAN;AAAL;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEP,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAEI,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAQ,QAAA,OAAO,EAAEC,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAQ,QAAA,OAAO,EAAEG,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AAtC0C","sourcesContent":["import React, { Component } from 'react'\r\nimport store from '../../redux/store'\r\n\r\nexport default class Count extends Component {\r\n  // 虽然更改了Redux的state, 但是不会引起组件的重新执行render\r\n  // 每次redux一旦改变, 就会执行store.subscribe方法,可以在这个方法里更细一个空state\r\n  // 只要state改变就会重新执行render\r\n  // 也可以在index.js中执行这个, 具体可以去那里看\r\n  // 因此可以在生命周期开始利用store.subscribe进行监视,\r\n  componentDidMount () {\r\n    \r\n  }\r\n\r\n  incerate = () => {\r\n    // 像store传递action对象, store再将preState和action对象传给reducer\r\n    store.dispatch({ type: 'increase', data: 1 })\r\n  }\r\n  decrease = () => {\r\n    store.dispatch({ type: 'decrease', data: 1 })\r\n  }\r\n  incerateOdd = () => {\r\n    const count = store.getState()\r\n    if (count % 2 === 0) return\r\n    store.dispatch({ type: 'increase', data: 1 })\r\n  }\r\n  incerateAsync = () => {\r\n    setTimeout(() => {\r\n      store.dispatch({ type: 'increase', data: 1 })\r\n    }, 500)\r\n  }\r\n  render () {\r\n    const { incerate, decrease, incerateOdd, incerateAsync } = this\r\n    return (\r\n      <div>\r\n        <h1>{store.getState()}</h1>\r\n        <button onClick={incerate}>+1</button>\r\n        <button onClick={decrease}>-1</button>\r\n        <button onClick={incerateOdd}>奇数+</button>\r\n        <button onClick={incerateAsync}>异步+</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}